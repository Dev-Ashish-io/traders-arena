{"ast":null,"code":"// Fetch teams and render them with real-time updates\nfunction fetchTeams() {\n  fetch('http://localhost:5000/teams').then(response => response.json()).then(data => {\n    const teamsDiv = document.querySelector('.teams-container');\n    teamsDiv.innerHTML = data.map(team => `\n              <div class=\"team-card p-6 bg-white shadow-lg rounded-lg transform transition-all duration-300 hover:scale-105 hover:shadow-xl hover:bg-blue-100 cursor-pointer\">\n                  <h3 class=\"font-semibold text-xl mb-4\">${team.name}</h3>\n                  <p class=\"text-gray-700\">Money: $${team.money.toFixed(2)}</p>\n                  <p class=\"text-gray-700\">Stocks: ${JSON.stringify(team.stocks)}</p>\n              </div>\n          `).join('');\n  }).catch(error => {\n    showErrorModal(\"Error fetching teams: \" + error.message);\n  });\n}\n\n// Transaction Form Submit Handler\ndocument.getElementById('transactionForm').addEventListener('submit', function (e) {\n  e.preventDefault();\n  const payload = {\n    team_id: document.getElementById('teamId').value,\n    stock_name: document.getElementById('stockName').value,\n    quantity: parseInt(document.getElementById('quantity').value, 10),\n    price: parseFloat(document.getElementById('price').value),\n    action: document.getElementById('action').value\n  };\n  fetch('http://localhost:5000/transactions', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(payload)\n  }).then(response => response.json()).then(data => {\n    if (data.success) {\n      fetchTeams();\n      showModal(); // Show modal after successful transaction\n    } else {\n      showErrorModal(\"Transaction failed: \" + data.message);\n    }\n  }).catch(error => {\n    showErrorModal(\"Transaction error: \" + error.message);\n  });\n});\n\n// Show modal after successful transaction\nfunction showModal() {\n  const modal = document.getElementById('transactionModal');\n  modal.classList.remove('hidden');\n  setTimeout(() => {\n    modal.classList.add('hidden');\n  }, 3000); // Hide after 3 seconds\n}\n\n// Show error modal\nfunction showErrorModal(message) {\n  const modal = document.getElementById('errorModal');\n  const messageElement = document.getElementById('errorMessage');\n  messageElement.textContent = message;\n  modal.classList.remove('hidden');\n  setTimeout(() => {\n    modal.classList.add('hidden');\n  }, 5000); // Hide after 5 seconds\n}\n\n// Close modal\ndocument.getElementById('closeModal').addEventListener('click', () => {\n  const modal = document.getElementById('transactionModal');\n  modal.classList.add('hidden');\n});\ndocument.getElementById('closeErrorModal').addEventListener('click', () => {\n  const modal = document.getElementById('errorModal');\n  modal.classList.add('hidden');\n});\n\n// Initial setup\nfetchTeams();\n\n// Real-time updates using WebSocket (optional)\nconst socket = new WebSocket('ws://localhost:5000');\nsocket.onmessage = function (event) {\n  const data = JSON.parse(event.data);\n  if (data.type === 'teamUpdate') {\n    fetchTeams(); // Update teams with new data from server\n  }\n};","map":{"version":3,"names":["fetchTeams","fetch","then","response","json","data","teamsDiv","document","querySelector","innerHTML","map","team","name","money","toFixed","JSON","stringify","stocks","join","catch","error","showErrorModal","message","getElementById","addEventListener","e","preventDefault","payload","team_id","value","stock_name","quantity","parseInt","price","parseFloat","action","method","headers","body","success","showModal","modal","classList","remove","setTimeout","add","messageElement","textContent","socket","WebSocket","onmessage","event","parse","type"],"sources":["C:/Users/Ashish singh/frontend-traders/src/index.js"],"sourcesContent":["// Fetch teams and render them with real-time updates\nfunction fetchTeams() {\n  fetch('http://localhost:5000/teams')\n      .then(response => response.json())\n      .then(data => {\n          const teamsDiv = document.querySelector('.teams-container');\n          teamsDiv.innerHTML = data.map(team => `\n              <div class=\"team-card p-6 bg-white shadow-lg rounded-lg transform transition-all duration-300 hover:scale-105 hover:shadow-xl hover:bg-blue-100 cursor-pointer\">\n                  <h3 class=\"font-semibold text-xl mb-4\">${team.name}</h3>\n                  <p class=\"text-gray-700\">Money: $${team.money.toFixed(2)}</p>\n                  <p class=\"text-gray-700\">Stocks: ${JSON.stringify(team.stocks)}</p>\n              </div>\n          `).join('');\n      })\n      .catch(error => {\n          showErrorModal(\"Error fetching teams: \" + error.message);\n      });\n}\n\n// Transaction Form Submit Handler\ndocument.getElementById('transactionForm').addEventListener('submit', function (e) {\n  e.preventDefault();\n\n  const payload = {\n      team_id: document.getElementById('teamId').value,\n      stock_name: document.getElementById('stockName').value,\n      quantity: parseInt(document.getElementById('quantity').value, 10),\n      price: parseFloat(document.getElementById('price').value),\n      action: document.getElementById('action').value\n  };\n\n  fetch('http://localhost:5000/transactions', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(payload)\n  })\n      .then(response => response.json())\n      .then(data => {\n          if (data.success) {\n              fetchTeams();\n              showModal();  // Show modal after successful transaction\n          } else {\n              showErrorModal(\"Transaction failed: \" + data.message);\n          }\n      })\n      .catch(error => {\n          showErrorModal(\"Transaction error: \" + error.message);\n      });\n});\n\n// Show modal after successful transaction\nfunction showModal() {\n  const modal = document.getElementById('transactionModal');\n  modal.classList.remove('hidden');\n  setTimeout(() => {\n      modal.classList.add('hidden');\n  }, 3000);  // Hide after 3 seconds\n}\n\n// Show error modal\nfunction showErrorModal(message) {\n  const modal = document.getElementById('errorModal');\n  const messageElement = document.getElementById('errorMessage');\n  messageElement.textContent = message;\n  modal.classList.remove('hidden');\n  setTimeout(() => {\n      modal.classList.add('hidden');\n  }, 5000);  // Hide after 5 seconds\n}\n\n// Close modal\ndocument.getElementById('closeModal').addEventListener('click', () => {\n  const modal = document.getElementById('transactionModal');\n  modal.classList.add('hidden');\n});\n\ndocument.getElementById('closeErrorModal').addEventListener('click', () => {\n  const modal = document.getElementById('errorModal');\n  modal.classList.add('hidden');\n});\n\n// Initial setup\nfetchTeams();\n\n// Real-time updates using WebSocket (optional)\nconst socket = new WebSocket('ws://localhost:5000');\nsocket.onmessage = function (event) {\n  const data = JSON.parse(event.data);\n  if (data.type === 'teamUpdate') {\n      fetchTeams(); // Update teams with new data from server\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}